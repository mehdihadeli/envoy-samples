// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gambol99/go-marathon (interfaces: Marathon)

package marathon

import (
	go_marathon "github.com/gambol99/go-marathon"
	gomock "github.com/golang/mock/gomock"
	url "net/url"
	reflect "reflect"
	time "time"
)

// MockMarathon is a mock of Marathon interface
type MockMarathon struct {
	ctrl     *gomock.Controller
	recorder *MockMarathonMockRecorder
}

// MockMarathonMockRecorder is the mock recorder for MockMarathon
type MockMarathonMockRecorder struct {
	mock *MockMarathon
}

// NewMockMarathon creates a new mock instance
func NewMockMarathon(ctrl *gomock.Controller) *MockMarathon {
	mock := &MockMarathon{ctrl: ctrl}
	mock.recorder = &MockMarathonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarathon) EXPECT() *MockMarathonMockRecorder {
	return m.recorder
}

// AbdicateLeader mocks base method
func (m *MockMarathon) AbdicateLeader() (string, error) {
	ret := m.ctrl.Call(m, "AbdicateLeader")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbdicateLeader indicates an expected call of AbdicateLeader
func (mr *MockMarathonMockRecorder) AbdicateLeader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbdicateLeader", reflect.TypeOf((*MockMarathon)(nil).AbdicateLeader))
}

// AddEventsListener mocks base method
func (m *MockMarathon) AddEventsListener(arg0 int) (go_marathon.EventsChannel, error) {
	ret := m.ctrl.Call(m, "AddEventsListener", arg0)
	ret0, _ := ret[0].(go_marathon.EventsChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventsListener indicates an expected call of AddEventsListener
func (mr *MockMarathonMockRecorder) AddEventsListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventsListener", reflect.TypeOf((*MockMarathon)(nil).AddEventsListener), arg0)
}

// AllTasks mocks base method
func (m *MockMarathon) AllTasks(arg0 *go_marathon.AllTasksOpts) (*go_marathon.Tasks, error) {
	ret := m.ctrl.Call(m, "AllTasks", arg0)
	ret0, _ := ret[0].(*go_marathon.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllTasks indicates an expected call of AllTasks
func (mr *MockMarathonMockRecorder) AllTasks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTasks", reflect.TypeOf((*MockMarathon)(nil).AllTasks), arg0)
}

// Application mocks base method
func (m *MockMarathon) Application(arg0 string) (*go_marathon.Application, error) {
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(*go_marathon.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockMarathonMockRecorder) Application(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockMarathon)(nil).Application), arg0)
}

// ApplicationBy mocks base method
func (m *MockMarathon) ApplicationBy(arg0 string, arg1 *go_marathon.GetAppOpts) (*go_marathon.Application, error) {
	ret := m.ctrl.Call(m, "ApplicationBy", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationBy indicates an expected call of ApplicationBy
func (mr *MockMarathonMockRecorder) ApplicationBy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationBy", reflect.TypeOf((*MockMarathon)(nil).ApplicationBy), arg0, arg1)
}

// ApplicationByVersion mocks base method
func (m *MockMarathon) ApplicationByVersion(arg0, arg1 string) (*go_marathon.Application, error) {
	ret := m.ctrl.Call(m, "ApplicationByVersion", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationByVersion indicates an expected call of ApplicationByVersion
func (mr *MockMarathonMockRecorder) ApplicationByVersion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationByVersion", reflect.TypeOf((*MockMarathon)(nil).ApplicationByVersion), arg0, arg1)
}

// ApplicationDeployments mocks base method
func (m *MockMarathon) ApplicationDeployments(arg0 string) ([]*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "ApplicationDeployments", arg0)
	ret0, _ := ret[0].([]*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationDeployments indicates an expected call of ApplicationDeployments
func (mr *MockMarathonMockRecorder) ApplicationDeployments(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDeployments", reflect.TypeOf((*MockMarathon)(nil).ApplicationDeployments), arg0)
}

// ApplicationOK mocks base method
func (m *MockMarathon) ApplicationOK(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "ApplicationOK", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationOK indicates an expected call of ApplicationOK
func (mr *MockMarathonMockRecorder) ApplicationOK(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationOK", reflect.TypeOf((*MockMarathon)(nil).ApplicationOK), arg0)
}

// ApplicationVersions mocks base method
func (m *MockMarathon) ApplicationVersions(arg0 string) (*go_marathon.ApplicationVersions, error) {
	ret := m.ctrl.Call(m, "ApplicationVersions", arg0)
	ret0, _ := ret[0].(*go_marathon.ApplicationVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationVersions indicates an expected call of ApplicationVersions
func (mr *MockMarathonMockRecorder) ApplicationVersions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationVersions", reflect.TypeOf((*MockMarathon)(nil).ApplicationVersions), arg0)
}

// Applications mocks base method
func (m *MockMarathon) Applications(arg0 url.Values) (*go_marathon.Applications, error) {
	ret := m.ctrl.Call(m, "Applications", arg0)
	ret0, _ := ret[0].(*go_marathon.Applications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Applications indicates an expected call of Applications
func (mr *MockMarathonMockRecorder) Applications(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Applications", reflect.TypeOf((*MockMarathon)(nil).Applications), arg0)
}

// CreateApplication mocks base method
func (m *MockMarathon) CreateApplication(arg0 *go_marathon.Application) (*go_marathon.Application, error) {
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(*go_marathon.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockMarathonMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockMarathon)(nil).CreateApplication), arg0)
}

// CreateGroup mocks base method
func (m *MockMarathon) CreateGroup(arg0 *go_marathon.Group) error {
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockMarathonMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockMarathon)(nil).CreateGroup), arg0)
}

// DeleteApplication mocks base method
func (m *MockMarathon) DeleteApplication(arg0 string, arg1 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockMarathonMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockMarathon)(nil).DeleteApplication), arg0, arg1)
}

// DeleteDeployment mocks base method
func (m *MockMarathon) DeleteDeployment(arg0 string, arg1 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "DeleteDeployment", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockMarathonMockRecorder) DeleteDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockMarathon)(nil).DeleteDeployment), arg0, arg1)
}

// DeleteGroup mocks base method
func (m *MockMarathon) DeleteGroup(arg0 string, arg1 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockMarathonMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockMarathon)(nil).DeleteGroup), arg0, arg1)
}

// DeleteQueueDelay mocks base method
func (m *MockMarathon) DeleteQueueDelay(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteQueueDelay", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueueDelay indicates an expected call of DeleteQueueDelay
func (mr *MockMarathonMockRecorder) DeleteQueueDelay(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueDelay", reflect.TypeOf((*MockMarathon)(nil).DeleteQueueDelay), arg0)
}

// Deployments mocks base method
func (m *MockMarathon) Deployments() ([]*go_marathon.Deployment, error) {
	ret := m.ctrl.Call(m, "Deployments")
	ret0, _ := ret[0].([]*go_marathon.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployments indicates an expected call of Deployments
func (mr *MockMarathonMockRecorder) Deployments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployments", reflect.TypeOf((*MockMarathon)(nil).Deployments))
}

// GetMarathonURL mocks base method
func (m *MockMarathon) GetMarathonURL() string {
	ret := m.ctrl.Call(m, "GetMarathonURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMarathonURL indicates an expected call of GetMarathonURL
func (mr *MockMarathonMockRecorder) GetMarathonURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarathonURL", reflect.TypeOf((*MockMarathon)(nil).GetMarathonURL))
}

// Group mocks base method
func (m *MockMarathon) Group(arg0 string) (*go_marathon.Group, error) {
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(*go_marathon.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Group indicates an expected call of Group
func (mr *MockMarathonMockRecorder) Group(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockMarathon)(nil).Group), arg0)
}

// GroupBy mocks base method
func (m *MockMarathon) GroupBy(arg0 string, arg1 *go_marathon.GetGroupOpts) (*go_marathon.Group, error) {
	ret := m.ctrl.Call(m, "GroupBy", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupBy indicates an expected call of GroupBy
func (mr *MockMarathonMockRecorder) GroupBy(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBy", reflect.TypeOf((*MockMarathon)(nil).GroupBy), arg0, arg1)
}

// Groups mocks base method
func (m *MockMarathon) Groups() (*go_marathon.Groups, error) {
	ret := m.ctrl.Call(m, "Groups")
	ret0, _ := ret[0].(*go_marathon.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Groups indicates an expected call of Groups
func (mr *MockMarathonMockRecorder) Groups() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Groups", reflect.TypeOf((*MockMarathon)(nil).Groups))
}

// GroupsBy mocks base method
func (m *MockMarathon) GroupsBy(arg0 *go_marathon.GetGroupOpts) (*go_marathon.Groups, error) {
	ret := m.ctrl.Call(m, "GroupsBy", arg0)
	ret0, _ := ret[0].(*go_marathon.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupsBy indicates an expected call of GroupsBy
func (mr *MockMarathonMockRecorder) GroupsBy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupsBy", reflect.TypeOf((*MockMarathon)(nil).GroupsBy), arg0)
}

// HasApplicationVersion mocks base method
func (m *MockMarathon) HasApplicationVersion(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasApplicationVersion", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasApplicationVersion indicates an expected call of HasApplicationVersion
func (mr *MockMarathonMockRecorder) HasApplicationVersion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasApplicationVersion", reflect.TypeOf((*MockMarathon)(nil).HasApplicationVersion), arg0, arg1)
}

// HasDeployment mocks base method
func (m *MockMarathon) HasDeployment(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasDeployment", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasDeployment indicates an expected call of HasDeployment
func (mr *MockMarathonMockRecorder) HasDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDeployment", reflect.TypeOf((*MockMarathon)(nil).HasDeployment), arg0)
}

// HasGroup mocks base method
func (m *MockMarathon) HasGroup(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "HasGroup", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGroup indicates an expected call of HasGroup
func (mr *MockMarathonMockRecorder) HasGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGroup", reflect.TypeOf((*MockMarathon)(nil).HasGroup), arg0)
}

// Info mocks base method
func (m *MockMarathon) Info() (*go_marathon.Info, error) {
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*go_marathon.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockMarathonMockRecorder) Info() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockMarathon)(nil).Info))
}

// KillApplicationTasks mocks base method
func (m *MockMarathon) KillApplicationTasks(arg0 string, arg1 *go_marathon.KillApplicationTasksOpts) (*go_marathon.Tasks, error) {
	ret := m.ctrl.Call(m, "KillApplicationTasks", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillApplicationTasks indicates an expected call of KillApplicationTasks
func (mr *MockMarathonMockRecorder) KillApplicationTasks(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillApplicationTasks", reflect.TypeOf((*MockMarathon)(nil).KillApplicationTasks), arg0, arg1)
}

// KillTask mocks base method
func (m *MockMarathon) KillTask(arg0 string, arg1 *go_marathon.KillTaskOpts) (*go_marathon.Task, error) {
	ret := m.ctrl.Call(m, "KillTask", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillTask indicates an expected call of KillTask
func (mr *MockMarathonMockRecorder) KillTask(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillTask", reflect.TypeOf((*MockMarathon)(nil).KillTask), arg0, arg1)
}

// KillTasks mocks base method
func (m *MockMarathon) KillTasks(arg0 []string, arg1 *go_marathon.KillTaskOpts) error {
	ret := m.ctrl.Call(m, "KillTasks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillTasks indicates an expected call of KillTasks
func (mr *MockMarathonMockRecorder) KillTasks(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillTasks", reflect.TypeOf((*MockMarathon)(nil).KillTasks), arg0, arg1)
}

// Leader mocks base method
func (m *MockMarathon) Leader() (string, error) {
	ret := m.ctrl.Call(m, "Leader")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leader indicates an expected call of Leader
func (mr *MockMarathonMockRecorder) Leader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leader", reflect.TypeOf((*MockMarathon)(nil).Leader))
}

// ListApplications mocks base method
func (m *MockMarathon) ListApplications(arg0 url.Values) ([]string, error) {
	ret := m.ctrl.Call(m, "ListApplications", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockMarathonMockRecorder) ListApplications(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockMarathon)(nil).ListApplications), arg0)
}

// Ping mocks base method
func (m *MockMarathon) Ping() (bool, error) {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockMarathonMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMarathon)(nil).Ping))
}

// Queue mocks base method
func (m *MockMarathon) Queue() (*go_marathon.Queue, error) {
	ret := m.ctrl.Call(m, "Queue")
	ret0, _ := ret[0].(*go_marathon.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queue indicates an expected call of Queue
func (mr *MockMarathonMockRecorder) Queue() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockMarathon)(nil).Queue))
}

// RemoveEventsListener mocks base method
func (m *MockMarathon) RemoveEventsListener(arg0 go_marathon.EventsChannel) {
	m.ctrl.Call(m, "RemoveEventsListener", arg0)
}

// RemoveEventsListener indicates an expected call of RemoveEventsListener
func (mr *MockMarathonMockRecorder) RemoveEventsListener(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventsListener", reflect.TypeOf((*MockMarathon)(nil).RemoveEventsListener), arg0)
}

// RestartApplication mocks base method
func (m *MockMarathon) RestartApplication(arg0 string, arg1 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "RestartApplication", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartApplication indicates an expected call of RestartApplication
func (mr *MockMarathonMockRecorder) RestartApplication(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartApplication", reflect.TypeOf((*MockMarathon)(nil).RestartApplication), arg0, arg1)
}

// ScaleApplicationInstances mocks base method
func (m *MockMarathon) ScaleApplicationInstances(arg0 string, arg1 int, arg2 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "ScaleApplicationInstances", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleApplicationInstances indicates an expected call of ScaleApplicationInstances
func (mr *MockMarathonMockRecorder) ScaleApplicationInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleApplicationInstances", reflect.TypeOf((*MockMarathon)(nil).ScaleApplicationInstances), arg0, arg1, arg2)
}

// SetApplicationVersion mocks base method
func (m *MockMarathon) SetApplicationVersion(arg0 string, arg1 *go_marathon.ApplicationVersion) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "SetApplicationVersion", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetApplicationVersion indicates an expected call of SetApplicationVersion
func (mr *MockMarathonMockRecorder) SetApplicationVersion(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationVersion", reflect.TypeOf((*MockMarathon)(nil).SetApplicationVersion), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockMarathon) Subscribe(arg0 string) error {
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMarathonMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMarathon)(nil).Subscribe), arg0)
}

// Subscriptions mocks base method
func (m *MockMarathon) Subscriptions() (*go_marathon.Subscriptions, error) {
	ret := m.ctrl.Call(m, "Subscriptions")
	ret0, _ := ret[0].(*go_marathon.Subscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscriptions indicates an expected call of Subscriptions
func (mr *MockMarathonMockRecorder) Subscriptions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockMarathon)(nil).Subscriptions))
}

// TaskEndpoints mocks base method
func (m *MockMarathon) TaskEndpoints(arg0 string, arg1 int, arg2 bool) ([]string, error) {
	ret := m.ctrl.Call(m, "TaskEndpoints", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskEndpoints indicates an expected call of TaskEndpoints
func (mr *MockMarathonMockRecorder) TaskEndpoints(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskEndpoints", reflect.TypeOf((*MockMarathon)(nil).TaskEndpoints), arg0, arg1, arg2)
}

// Tasks mocks base method
func (m *MockMarathon) Tasks(arg0 string) (*go_marathon.Tasks, error) {
	ret := m.ctrl.Call(m, "Tasks", arg0)
	ret0, _ := ret[0].(*go_marathon.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tasks indicates an expected call of Tasks
func (mr *MockMarathonMockRecorder) Tasks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tasks", reflect.TypeOf((*MockMarathon)(nil).Tasks), arg0)
}

// Unsubscribe mocks base method
func (m *MockMarathon) Unsubscribe(arg0 string) error {
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockMarathonMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockMarathon)(nil).Unsubscribe), arg0)
}

// UpdateApplication mocks base method
func (m *MockMarathon) UpdateApplication(arg0 *go_marathon.Application, arg1 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockMarathonMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockMarathon)(nil).UpdateApplication), arg0, arg1)
}

// UpdateGroup mocks base method
func (m *MockMarathon) UpdateGroup(arg0 string, arg1 *go_marathon.Group, arg2 bool) (*go_marathon.DeploymentID, error) {
	ret := m.ctrl.Call(m, "UpdateGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_marathon.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup
func (mr *MockMarathonMockRecorder) UpdateGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockMarathon)(nil).UpdateGroup), arg0, arg1, arg2)
}

// WaitOnApplication mocks base method
func (m *MockMarathon) WaitOnApplication(arg0 string, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitOnApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitOnApplication indicates an expected call of WaitOnApplication
func (mr *MockMarathonMockRecorder) WaitOnApplication(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitOnApplication", reflect.TypeOf((*MockMarathon)(nil).WaitOnApplication), arg0, arg1)
}

// WaitOnDeployment mocks base method
func (m *MockMarathon) WaitOnDeployment(arg0 string, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitOnDeployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitOnDeployment indicates an expected call of WaitOnDeployment
func (mr *MockMarathonMockRecorder) WaitOnDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitOnDeployment", reflect.TypeOf((*MockMarathon)(nil).WaitOnDeployment), arg0, arg1)
}

// WaitOnGroup mocks base method
func (m *MockMarathon) WaitOnGroup(arg0 string, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "WaitOnGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitOnGroup indicates an expected call of WaitOnGroup
func (mr *MockMarathonMockRecorder) WaitOnGroup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitOnGroup", reflect.TypeOf((*MockMarathon)(nil).WaitOnGroup), arg0, arg1)
}
